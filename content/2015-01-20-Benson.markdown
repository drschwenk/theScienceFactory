Title: Exploring NYC Subway Ridership
Date: 2015-10-1 21:00
Author: Dustin Schwenk
Slug: Benson
Category: personal projects 
Tags: EDA, 
Summary: Diving into Python and EDA with NYC turnstile counts

My first week in New York was focused on exploring the subway system as a generator of data, as well as a means of transportation.
The city's transit authority releases weakly counts of commuter's entrances and exits throughout the subway system. Exploring these
[turnstile counts](http://web.mta.info/developers/turnstile.html) made for a nice introduction for me to the IPython environment.
I was initially skeptical of programming in a browser, but for tentative first dives into new data, it's completely won me 
over. 

A quick look at one of the files reveals the contents--

C/A,UNIT,SCP,STATION,LINENAME,DIVISION,DATE,TIME,DESC,ENTRIES,EXITS   
A002,R051,02-00-00,LEXINGTON AVE,456NQR,BMT,09-27-14,00:00:00,REGULAR,0004800073,0001629137,

with the fields described as--

C/A      = Control Area (A002)  
UNIT     = Remote Unit for a station (R051)     
SCP      = Subunit Channel Position represents an specific address for a device (02-00-00)  
STATION  = Represents the station name the device is located at     
LINENAME = Represents all train lines that can be boarded at this station   
DIVISION = Represents the Line originally the station belonged to BMT, IRT, or IND          
DATE     = Represents the date (MM-DD-YY)       
TIME     = Represents the time (hh:mm:ss) for a scheduled audit event       
DESc     = Represent the "REGULAR" scheduled audit event (Normally occurs every 4 hours)    
ENTRIES  = The cumulative entry register value for a device         
EXIST    = The cumulative exit register value for a device      

It seems that the counts are given per turnstile, and that the turnstiles are grouped into units, control areas, and ultimately a station. 
For an individual turnstile, we have the date, time, and cumulative number of entries and exits made up until the time of that audit.


To get started, let's read on of the csv files and start assembling the data structures that we'll need. The tabular nature of the data
calls out for a pandas dataframe, but this first project will be restricted to standard python objects and functions. For a first look, let's tranform the series 
of cumulative counts per audit period into the total number of commuters per day.
{% notebook benson.ipynb cells[5:6] %}
The function makedaily_ts does just this, returning a dictionary keyed to the turnstile with associated list of times and counts.
After exploring the results for a few stations, it became apparent that the turnstile counts were not always reset at the end of 
day. When a mid day reset occurs, the total count at the end of the day will be smaller than the beginning, which makes these events
readily detectable. 
{% include_code Benson_modules.py lang:python lines:40-71 :hidefilename: code %}
Let's now take a look at what a week looks like for a single turnstile.
{% notebook benson.ipynb cells[7:8] %}
A quick check of a calender reveals that Jan 3rd is saturday, and this turnstile highlights the difference between weekday and weekend
travel.I don't have any intuition as to how a particular turnstile will, so let's now combine turnstiles counts into something
more identifiable--a subway station. 
{% notebook benson.ipynb cells[9:10] %}
{% notebook benson.ipynb cells[11:12] %}
Herald Square is one of the larger subway stations in New York, with around 100,000 riders moving through it in a day. 
Reassuringly, it shows the same weekend decline in ridership as the single turnstile we examined. So far we've only looked at ridership
over a single week in early January. Let's now look at how ridership has changed for this stations over a few weeks by adding 
 additional curves to this figure.
{% notebook benson.ipynb cells[17:18] %}
We see that two weeks of the past eight have significantly reduced numbers of people moving through Herald Square. We shouldn't 
be too surprised to discover that these correspond to the weeks of Christmas and Thanksgiving. 

Let's now take a look at the rest of the subway network. As a check of my process, I'd like to look at the stations with the 
highest traffic. If If we sum the daily rider counts over the weeks, I'd expect to see stations that I even I would recognize near the 
top.
{% notebook benson.ipynb cells[19:20] %}
Great--I recognize at least 70% of these. The highest traffic stations had over 4M people moving through them over the 8 weeks
that I have data for. Traffic seems to fall off fairly quickly from the largest stations. Let's see what the distribution 
of station sizes looks like for the rest of the system.
{% notebook benson.ipynb cells[20:21] %}
There are fewer than 15 stations with more than 2M riders, and the station size skews heavily towards smaller stations.
It would be interesting to look at this distribution for a subway system that was centrally planned, instead of an organically grown system 
NYC's.




